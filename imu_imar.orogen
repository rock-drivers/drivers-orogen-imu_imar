name "imu_imar"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
# import_types_from "imu_imarType.hpp"
using_library 'imu_imar'
using_library "aggregator"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from "aggregator"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the imu_imar namespace.
task_context "Task" do

    #******************************
    #**** Component Properties ****
    #******************************
    property('com_port', '/std/string', "/dev/ttyUSB0").
        doc 'the acquisition device port'

    property('debug_port', '/std/string', "").
        doc 'the configuration device port. It can be used to configure the baud rate, sampling frequency, output format, etc...'

    property('baudrate', 'int', 57600).
        doc 'Baud rate to open the serial com_port and debug_port'

    property('sampling_rate', 'double', 100).
        doc 'Sampling acquisition rate in Hertz. It should be the same value that'
	doc 'in the periodic of the Tesk. It is used for the TimestampEstimator'
	doc 'and also to configure the IMU using the debug_port (currently not implemented)'
    
    #******************************
    #******* Input ports  *********
    #******************************

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('orientation_samples', '/base/samples/RigidBodyState').
        doc 'provides timestamped IMUReading samples containing the orientation estimate as reported by the IMU.'

    output_port('calibrated_sensors', '/base/samples/IMUSensors').
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings (accelerometers and gyroscopes).'

    output_port('timestamp_estimator_status', 'aggregator::TimestampEstimatorStatus').
	doc("Debug output of the TimestampEstimator")

end

